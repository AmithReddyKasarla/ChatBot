# -*- coding: utf-8 -*-
"""CHATBOT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PsTbktOvovbL0R89PThPq_oBz_CRIQvJ

**CHATBOT**
"""

!pip install langgraph langsmith

!pip install langchain langchain_groq langchain_community

from google.colab import userdata
groq_api_key = userdata.get('Groq_API')
langsmith = userdata.get('LangSmith_API')

import os
 os.environ['LANGCHAIN_TRACING_V2'] = 'true'
 os.environ['LANGCHAIN_PROJECT'] = "CHATBOT"
 os.environ['LANGCHAIN_API_KEY'] = langsmith

"""**Using LLM**"""

from langchain_groq import ChatGroq

llm=ChatGroq(groq_api_key=groq_api_key,model_name="llama3-8b-8192" )
llm

from typing import Annotated
from typing_extensions import TypedDict
from langgraph.graph import StateGraph,START,END
from langgraph.graph.message import add_messages

class State(TypedDict):
  messages:Annotated[list, add_messages]

GraphBuilder=StateGraph(State)
GraphBuilder

def ChatBot(state:State):
  return{"messages":llm.invoke(state['messages'])}

GraphBuilder.add_node("ChatBot",ChatBot)
GraphBuilder

GraphBuilder.add_edge(START,"ChatBot")
GraphBuilder.add_edge("ChatBot",END)
GraphBuilder

graph=GraphBuilder.compile()

from IPython.display import Image, display
try:
  display(Image(graph.get_graph().draw_mermaid_png()))
except Exception:
  pass

"""while True:
  print("Please type end when you're done")
  user_input=input("User: ")
  if user_input.lower() in ["end"]:
    print("Thank you for chatting. Talk to you later!")
    break
  for event in graph.stream({'messages':("user",user_input)}):
    print(event.values())
    for value in event.values():
      print(value['messages'])
      print("ChatBot:",value['messages'].content)

**Using LLM and Tools**
"""

!pip install arxiv wikipedia

from langchain_community.utilities import ArxivAPIWrapper,WikipediaAPIWrapper
from langchain_community.tools import ArxivQueryRun,WikipediaQueryRun

from langgraph.prebuilt import ToolNode,tools_condition

arxiv_wrapper=ArxivAPIWrapper(top_k_results=1,doc_content_chars_max=500)
arxiv_tool=ArxivQueryRun(api_wrapper=arxiv_wrapper)
wikipedia_wrapper=WikipediaAPIWrapper(top_k_results=1,doc_content_chars_max=500)
wikipedia_tool=WikipediaQueryRun(api_wrapper=wikipedia_wrapper)

wikipedia_tool.invoke("Who is MS Dhoni?")

tool=[wikipedia_tool]

llm_with_tools=llm.bind(tools=tool)

GraphBuilderTools=StateGraph(State)
GraphBuilderTools

def ChatBot(state:State):
  return{"messages":llm_with_tools.invoke(state['messages'])}

GraphBuilderTools.add_node("ChatBot",ChatBot)
GraphBuilderTools

GraphBuilderTools.add_edge(START,"ChatBot")
tool_node=ToolNode(tools=tool)
GraphBuilderTools.add_node("tools",tool_node)
GraphBuilderTools.add_conditional_edges("ChatBot",tools_condition)
GraphBuilderTools.add_edge("tools","ChatBot")
GraphBuilderTools.add_edge("ChatBot",END)
GraphBuilderTools

GraphBuilderTools.compile()

print("Please type end when you're done")
while True:
  user_input=input("User: ")
  if user_input.lower() in ["end"]:
    print("Thank you for chatting. Talk to you later!")
    break
  for event in graph.stream({'messages':("user",user_input)}):
    print(event.values())
    for value in event.values():
      print(value['messages'])
      print("ChatBot:",value['messages'].content)

"""**Front End Interface**"""

!git config --global user.email "AmithReddyKasarla@my.unt.edu"
!git config --global user.name "AmithReddyKasarla"

import os
os.environ['GITHUB_TOKEN']="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"

!git clone https://github.com/AmithReddyKasarla/ChatBot.git

# Commented out IPython magic to ensure Python compatibility.
# %cd ChatBot
!git add .

!git commit -m "Adding code to github"

!git push origin main

